VSCode Overview - Main Features for Backend Development:

Debugging: Integrated debugging tools allow setting breakpoints, inspecting variables, and stepping through code.
Extensions: Supports a wide range of extensions for various languages, frameworks, and tools (e.g., ESLint, Prettier).
Terminal Integration: Built-in terminal for executing commands, running scripts, and managing Git.

Node.js and Express Basics

Node.js Purpose:
A JavaScript runtime that allows server-side scripting, enabling JavaScript
to be used for backend development.

Difference from Traditional Web Server: Node.js is event-driven and non-blocking,
allowing for handling multiple connections simultaneously
without threading.

Why Use Express: Express simplifies server creation with middleware support, easier routing,
and built-in functionalities compared to Nodeâ€™s HTTP module, which is more low-level and
requires more boilerplate code.

Extensions Overview

REST Client: Allows sending HTTP requests directly from VSCode, simplifying
API testing without leaving the editor.

Prettier: An opinionated code formatter that enforces consistent code style.
Configured via settings or .prettierrc file in the project.

ESLint: A linter that identifies and fixes common coding errors, enforces coding standards, and helps
prevent issues like syntax errors, undefined variables, and inconsistent code style.

Using Postman
API Testing: Postman provides a user-friendly interface to send requests, view responses,
and automate testing of APIs, making it ideal for development and testing workflows.

Differences from REST Client: Postman has a richer interface with features for organizing collections,
environments, and testing scripts, while the REST Client in VSCode is more lightweight and integrated
directly into the coding environment.